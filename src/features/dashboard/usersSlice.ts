import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { useDispatch } from "react-redux";
import { RootState, AppThunk } from "../../app/store";
import { fetchUsers } from "./usersAPI";

interface IGeo {
  lat: string;
  lng: string;
}

interface IAddress {
  street: string;
  suite: string;
  city: string;
  zipcode: string;
  geo: IGeo;
}

interface ICompany {
  name: string;
  catchPhrase: string;
  bs: string;
}

export interface IUser {
  id: number;
  name: string;
  username: string;
  email: string;
  address: IAddress;
  phone: string;
  website: string;
  company: ICompany;
}

export interface UsersState {
  usersList: IUser[];
  status: "idle" | "loading" | "failed";
}

const initialState: UsersState = {
  usersList: [],
  status: "idle",
};

export const getUsers = createAsyncThunk("users/fetchUsers", async () => {
  const response: IUser[] = await fetchUsers();
  return response;
});

export const usersSlice = createSlice({
  name: "users",
  initialState,
  reducers: {
    setUsers: (state, action: PayloadAction<IUser[]>) => {
      state.usersList = action.payload;
    },
    addUser: (state, action: PayloadAction<IUser>) => {
      state.usersList = state.usersList.concat(action.payload);
    },
    editUser: (state, action: PayloadAction<IUser>) => {
      const index = state.usersList.findIndex(
        ({ id }) => id === action.payload.id
      );
      state.usersList[index] = { ...state.usersList[index], ...action.payload };
    },
    deleteUser: (state, action: PayloadAction<IUser>) => {
      const filteredUsers = state.usersList.filter(
        (user) => user.id !== action.payload.id
      );
      state.usersList = filteredUsers;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUsers.fulfilled, (state, action) => {
        console.log(action.payload);
        state.usersList = action.payload;
      })
      // .addCase(incrementAsync.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   state.value += action.payload;
      // })
      .addCase(getUsers.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { setUsers, addUser, editUser, deleteUser } = usersSlice.actions;

export const selectUsers = (state: RootState) => state.users;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default usersSlice.reducer;
